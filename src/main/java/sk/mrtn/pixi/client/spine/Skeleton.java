package sk.mrtn.pixi.client.spine;

import jsinterop.annotations.JsConstructor;
import jsinterop.annotations.JsMethod;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;

/**
 * Skeleton has a reference to a SkeletonData and stores the STATE for skeleton instance,
 * which consists of the current pose's bone SRT, slot colors, and which slot attachments are visible.
 * Multiple skeletons can use the same SkeletonData (which includes all animations, skins, and attachments).
 *
 * @author Tomas Ecker
 */
@JsType(isNative = true, namespace = "PIXI.spine.core")
public class Skeleton {

    /**
     * The `SkeletonData` for the skeleton.
     * @return
     */
    @JsProperty
    public SkeletonData data;

    @JsProperty
    public boolean flipX;

    /**
     * Sets the slots to the setup pose, using the values from the `SlotData` list in the `SkeletonData`.
     */
    @JsMethod
    public native void setSlotsToSetupPose();

    /**
     * Sets the bones and slots to the setup pose.
     * Internally
     * a) set up bones to setup pose
     * b) set up slots to setup pose
     */
    @JsMethod
    public native void setToSetupPose();

    /**
     * Finds a bone by name. This does a string comparison for every bone.
     * @param boneName
     * @return
     */
    @JsMethod
    public native Bone findBone(String boneName);

    /**
     * Setup skin by skin instance.
     * @param newSkin
     */
    @JsMethod
    public native void setSkin(Skin newSkin);

    /**
     * Setup skin by name. Throws and error if such skin does not exists.
     * @param skinName - skin name
     */
    @JsMethod
    public native void setSkinByName(String skinName);

    @JsConstructor
    public Skeleton(SkeletonData data){};


    //region AUTOGENERATED METHODS AND FIELDS - not used
    // PUBLIC FIELDS
    @JsProperty
    public Object updateCacheReset;
    @JsProperty
    public int time;
    @JsProperty
    public boolean flipY;
    @JsProperty
    public int x;
    @JsProperty
    public int y;
    @JsProperty
    public Object bones;
    @JsProperty
    public Object slots;
    @JsProperty
    public Object drawOrder;
    @JsProperty
    public Object ikConstraints;
    @JsProperty
    public Object transformConstraints;
    @JsProperty
    public Object pathConstraints;
    @JsProperty
    public Object color;

    // PUBLIC METHODS
    @JsMethod
    public native Object updateCache();
    @JsMethod
    public native Object sortIkConstraint(Object constraint);
    @JsMethod
    public native Object sortPathConstraint(Object constraint);
    @JsMethod
    public native Object sortTransformConstraint(Object constraint);
    @JsMethod
    public native Object sortPathConstraintAttachment(Object skin, Object slotIndex, Object slotBone);
    @JsMethod
    public native Object sortPathConstraintAttachmentWith(Object attachment, Object slotBone);
    @JsMethod
    public native Object sortBone(Object bone);
    @JsMethod
    public native Object sortReset(Object bones);
    @JsMethod
    public native Object updateWorldTransform();
    @JsMethod
    public native Object setBonesToSetupPose();
    @JsMethod
    public native Object getRootBone();
    @JsMethod
    public native Object findBoneIndex(Object boneName);
    @JsMethod
    public native Object findSlot(Object slotName);
    @JsMethod
    public native Object findSlotIndex(Object slotName);
    @JsMethod
    public native Object getAttachmentByName(Object slotName, Object attachmentName);
    @JsMethod
    public native Object getAttachment(Object slotIndex, Object attachmentName);
    @JsMethod
    public native Object setAttachment(Object slotName, Object attachmentName);
    @JsMethod
    public native Object findIkConstraint(Object constraintName);
    @JsMethod
    public native Object findTransformConstraint(Object constraintName);
    @JsMethod
    public native Object findPathConstraint(Object constraintName);
    @JsMethod
    public native Object getBounds(Object offset, Object size, Object temp);
    @JsMethod
    public native Object update(Object delta);
    //endregion
}

