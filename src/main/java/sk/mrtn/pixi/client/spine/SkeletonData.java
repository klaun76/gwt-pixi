package sk.mrtn.pixi.client.spine;

import com.google.gwt.core.client.JavaScriptObject;
import jsinterop.annotations.JsConstructor;
import jsinterop.annotations.JsMethod;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;
import sk.mrtn.pixi.client.spine.animation.Animation;
import sk.mrtn.pixi.client.spine.events.EventData;

/**
 * Skeleton data contains whole structure of skeleton.json file.
 * - stores all the skins and animations as well as the setup pose's bone SRT, slot colors, and which slot attachments are visible.
 * The setup pose is how the skeleton looks in Spine's Setup Mode
 * <p>
 * {@link BoneData[]} bones - defining bone tree or which bone is connected to another.
 * {@link SlotData[]} slot - defining layer order of each slot
 * {@link Skin[]} skins - list of skins for skeleton. always contains at least default one
 * {@link Animation[]} animations - list of animations for skeleton
 * this.ikConstraints = [];
 * this.transformConstraints = [];
 * <p>
 * To create SkeletonData use {@link SkeletonJson#readSkeletonData(JavaScriptObject)}
 *
 * @author Tomas Ecker
 */
@JsType(isNative = true, namespace = "PIXI.spine.core")
public class SkeletonData {

    // PUBLIC FIELDS
    /**
     * Contains a list of all Bones Data instances
     * @return list of bones
     */
    @JsProperty
    public BoneData[] bones;

    /**
     * Contains list of all slot data. Visual layers defined by it's order
     * @return list of slots
     */
    @JsProperty
    public SlotData[] slots;

    /**
     * Contains a list of all Skin instances
     * @return list of skins containing at least default
     */
    @JsProperty
    public Skin[] skins;

    /**
     * Provides list of events
     * @return list of events or empty list if no user event's defined
     */
    @JsProperty
    public EventData[] events;

    /**
     * Contains a list of all Animation instances. Animation is applied on {@link Skeleton} to provide appropriates SRT and other transformations.
     * Animations could be played on different tracks simultaneously or one by one on single track with optional delay.
     * @return list of animations
     */
    @JsProperty
    public Animation[] animations;

    // CONSTRUCTOR
    @JsConstructor
    public SkeletonData(){};

    // PUBLIC METHODS

    /**
     * Find animation by it's name
     * @param animationName - animation name
     * @return animation instance or null if undefined
     */
    @JsMethod
    public native Animation findAnimation(String animationName);

    //region AUTOGENERATED METHODS AND FIELDS - not used

    /**
     * Provides list of ikConstraints
     * @return list of ikConstraint instances or empty list
     */
    @JsProperty
    public Object ikConstraints;

    /**
     * Provides list of transform constraints
     * @return list of transform instances or empty list
     */
    @JsProperty
    public Object transformConstraints;
    @JsProperty
    public Object pathConstraints;
    @JsProperty
    public int fps;

    // PUBLIC METHODS
    /**
     * Get a bone by it's name.
     * @param boneName - bone name
     * @return instance of bone or null if undefined
     */
    @JsMethod
    public native Object findBone(Object boneName);

    /**
     * Find bone index by bone name
     * @param boneName - bone name
     * @return instance of bone or null if undefined
     */
    @JsMethod
    public native Object findBoneIndex(Object boneName);

    /**
     * Get a slot by it's name.
     * @param slotName - slot name
     * @return instance of slot or null if not defined
     */
    @JsMethod
    public native Object findSlot(Object slotName);

    /**
     * Get slot index. It's primary used to retrieve attachments (Texture) from Skin
     * @param slotName - slot name
     * @return index of given slot name or -1 if undefined
     */
    @JsMethod
    public native Object findSlotIndex(Object slotName);

    /**
     * Find skin by skin name
     * @param skinName - skin name
     * @return instance of skin or null if undefined
     */
    @JsMethod
    public native Object findSkin(Object skinName);

    /**
     * Find events by event name
     * @param eventDataName - event name
     * @return instance of event or null if undefined
     */
    @JsMethod
    public native Object findEvent(Object eventDataName);

    /**
     * Find IkConstraint instance by it's name
     * @param constraintName - constraint name
     * @return constraint instance or null if undefined
     */
    @JsMethod
    public native Object findIkConstraint(Object constraintName);

    /**
     * Find transform constraint instance by it's name
     * @param constraintName - constraint name
     * @return constraint instance or null if undefined
     */
    @JsMethod
    public native Object findTransformConstraint(Object constraintName);
    @JsMethod
    public native Object findPathConstraint(Object constraintName);
    @JsMethod
    public native Object findPathConstraintIndex(Object pathConstraintName);
    //endregion
}
