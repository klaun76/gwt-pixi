package sk.mrtn.pixi.client.spine;

import com.google.gwt.core.client.JavaScriptObject;
import jsinterop.annotations.JsConstructor;
import jsinterop.annotations.JsMethod;
import jsinterop.annotations.JsProperty;
import jsinterop.annotations.JsType;

/**
 * Skeleton JSON parser
 * BINDs together VISUAL parts from Atlas
 * with raw skeleton data and
 * creates running hierarchy called {@link SkeletonData}
 *
 * @author Tomas Ecker
 */
@JsType(isNative = true, namespace = "PIXI.spine.core")
public class SkeletonJson {

    /**
     * Parse raw skeleton data.
     * We are passing JavaScriptObject due to JSNI. But it's valid JSON object
     *
     * @param javaScriptObject - raw skeleton data from your graphic
     * @return skeleton data instance created from raw skeleton data
     */
    @JsMethod
    public native SkeletonData readSkeletonData(JavaScriptObject javaScriptObject);

    @JsConstructor
    public SkeletonJson(Object attachmentLoader) {};

    //region AUTOGENERATED METHODS AND FIELDS - not used

    // PUBLIC FIELDS
    @JsProperty
    public int scale;
    @JsProperty
    public Object linkedMeshes;
    @JsProperty
    public Object attachmentLoader;

    @JsMethod
    public static native Object blendModeFromString(Object str);

    @JsMethod
    public static native Object positionModeFromString(Object str);

    @JsMethod
    public static native Object spacingModeFromString(Object str);

    @JsMethod
    public static native Object rotateModeFromString(Object str);

    @JsMethod
    public static native Object transformModeFromString(Object str);

    @JsMethod
    public native Object readAttachment(Object map, Object skin, Object slotIndex, Object name, Object skeletonData);
    @JsMethod
    public native Object readVertices(Object map, Object attachment, Object verticesLength);
    @JsMethod
    public native Object readAnimation(Object map, Object name, Object skeletonData);
    @JsMethod
    public native Object readCurve(Object map, Object timeline, Object frameIndex);
    @JsMethod
    public native Object getValue(Object map, Object prop, Object defaultValue);
    //endregion
}
